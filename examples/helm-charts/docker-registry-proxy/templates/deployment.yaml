apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "docker-registry-proxy.fullname" . }}
  namespace: docker-registry
  labels:
    {{- include "docker-registry-proxy.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "docker-registry-proxy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "docker-registry-proxy.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "docker-registry-proxy.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}


#
#
#
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: aws-registry-proxy
  namespace: docker-registry
  labels:
    app: aws-registry-proxy
    buildRef: latest
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: aws-registry-proxy
      buildRef: latest
  template:
    metadata:
      labels:
        app: aws-registry-proxy
        buildRef: latest
      name: aws-registry-proxy-latest
    spec:
      imagePullSecrets:
        - name: aws-registry
      containers:
      - name: app
        image: "nginx:alpine"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: "80"
          name: app
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: proxy-config
      volumes:
      - name: proxy-config
        configMap:
          defaultMode: 420
          name: aws-registry-proxy-config